// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> ResultOut;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;

float2 _PixelOffset;

float3 _ScreenSize;
uint _bounces;
uint _SamplePerPixel;
float _CameraFar;
uint _sampleCount;

struct Sphere
{
    float3 position;
    float3 rotation;
    float radius;
    
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};
StructuredBuffer<Sphere> _Spheres;
uint _numSpheres;


struct Box
{
    float4x4 localToWorldMatrix;
    float3 position;
    float3 rotation;
    float3 size;
    
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};
StructuredBuffer<Box> _Boxs;
uint _numBoxs;


struct MeshObject
{
    float4x4 localToWorldMatrix;
    int indices_offset;
    int indices_count;
    
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
};
uint _numMeshObjects;

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

struct Ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    
    float3 albedo;
    float3 specular;
    float smoothness;
    float3 emission;
    
    bool hited;
};


float2 _Pixel;
float _Seed;
StructuredBuffer<float> _Random;
float rand()
{
    float result = frac(sin(_Seed / 100.0f * dot(_Pixel, float2(12.9898f, 78.233f))) * 43758.5453f);
    _Seed += 1.0f;
    return result;
}

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0, 0, 0);
    // hit.distance = _CameraFar;
    hit.distance = 1.#INF;
    hit.normal = float3(0, 0, 0);
    hit.albedo = float3(0.1, 0.1, 0.1);
    hit.specular = float3(0.0, 0.0, 0.0);
    hit.smoothness = 0;
    hit.emission = float3(0.0, 0.0, 0.0);
    hit.hited = false;
    return hit;
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    
    return CreateRay(origin, direction);
}


void IntersectGroundPlane(Ray ray, inout RayHit hit)
{
    float t = - (ray.origin.y / ray.direction.y);
    
    if (t > 0 && t < hit.distance)
    {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = float3(0, 1, 0);
    }
}

void IntersectSphere(Ray ray, inout RayHit hit, Sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2: p1 + p2;
    if(t > 0 && t < hit.distance)
    {
        hit.distance = t;
        hit.position = ray.origin + t * ray.direction;
        hit.normal = normalize(hit.position - sphere.position);
        hit.albedo = sphere.albedo;
        hit.specular = sphere.specular;
        hit.smoothness = sphere.smoothness;
        hit.emission = sphere.emission;
        hit.hited = true;
    }
}


// axis aligned box centered at the origin, with size boxSize
void IntersectionBox(Ray ray, inout RayHit hit, Box box)
{
    // box.position = mul(box.localToWorldMatrix, box.position);
    // box.rotation = mul(box.localToWorldMatrix, box.rotation);
    //box.size = mul(box.localToWorldMatrix, box.size);
    
    //ray.origin = mul(box.localToWorldMatrix, ray.origin);
    //ray.direction = mul(box.localToWorldMatrix, ray.direction);
    
    
    float3 ro = ray.origin;
    float3 rd = ray.direction;
    float3 m = 1.0 / rd; // can precompute if traversing a set of aligned boxes
    float3 n = m * ro;   // can precompute if traversing a set of aligned boxes
    float3 k = abs(m) * box.size;
    float3 t1 = -n - k;
    float3 t2 = -n + k;
    float tN = max(max(t1.x, t1.y), t1.z);
    float tF = min(min(t2.x, t2.y), t2.z);
    float t = tN;
    if (tN > tF || tF < 0.0)
    {
        hit.hited = false;
    }
    else
    {
        if(t > 0 && t < _CameraFar && t < hit.distance)
        {
            hit.distance = t;
            hit.position = ray.origin + t * ray.direction;
            hit.normal = -sign(rd) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);
            hit.albedo = box.albedo;
            hit.specular = box.specular;
            hit.smoothness = box.smoothness;
            hit.emission = box.emission;
            hit.hited = true;
        }
    }
}


bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2,
inout float t, inout float u, inout float v)
{
    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    
    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);
    
    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);
    
    // use backface culling
    if (det < EPSILON)return false;
    
    float inv_det = 1.0f / det;
    
    // calculate distance from vert0 to ray origin
    float3 tvec = ray.origin - vert0;
    
    // calculate U parameter and test bounds
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)return false;
    
    // prepare to test V parameter
    float3 qvec = cross(tvec, edge1);
    
    // calculate V parameter and test bounds
    v = dot(ray.direction, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    
    // calculate t, ray intersects triangle
    t = dot(edge2, qvec) * inv_det;
    
    return true;
}

void IntersectMeshObject(Ray ray, inout RayHit hit, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset +meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
        float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
        float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;
        
        float t, u, v;
        if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
        {
            if(t > 0 && t < _CameraFar && t < hit.distance)
            {
                hit.distance = t;
                hit.position = ray.origin + t * ray.direction;
                hit.normal = normalize(cross(v1 - v0, v2 - v0));
                hit.albedo = meshObject.albedo;
                hit.specular = meshObject.specular;
                hit.smoothness = meshObject.smoothness;
                hit.emission = meshObject.emission;
                hit.hited = true;
            }
        }
    }
}


float3x3 GetTangentSpace(float3 normal)
{
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);
    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = normalize(cross(normal, tangent));
    return float3x3(tangent, binormal, normal);
}

float3 SampleHemisphere(float3 normal, float alpha)
{
    // Sample the hemisphere, where alpha determines the kind of the sampling
    float cosTheta = pow(rand(), 1.0f / (alpha + 1.0f));
    float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
    float phi = 2 * PI * rand();
    float3 tangentSpaceDir = float3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
    // Transform direction to world space
    return mul(tangentSpaceDir, GetTangentSpace(normal));
}

float3 SampleGlobalsphere()
{
    return normalize(float3(rand(), rand(), rand()) - float3(0.5, 0.5, 0.5));
}


RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    uint count, stride, i;
    // Trace ground plane
    //IntersectGroundPlane(ray, bestHit);
    
    // Trace spheres
    for (i = 0; i < _numSpheres; i ++)
    {
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    
    // Trace Box
    for (i = 0; i < _numBoxs; i ++)
    {
        IntersectionBox(ray, bestHit, _Boxs[i]);
    }
    
    // Trace mesh objects
    for (i = 0; i < _numMeshObjects; i ++)
    {
        IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
    }
    return bestHit;
}

float sdot(float3 x, float3 y, float f = 1.0f)
{
    return saturate(dot(x, y) * f);
}
float energy(float3 color)
{
    return dot(color, 1.0f / 3.0f);
}
float SmoothnessToPhongAlpha(float s)
{
    return pow(1000000.0f, s * s);
}
float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.hited)
    {
        hit.albedo = min(1.0f - hit.specular, hit.albedo);
        float specChance = energy(hit.specular);
        float diffChance = energy(hit.albedo);
        float sum = specChance + diffChance;
        specChance /= sum;
        diffChance /= sum;
        // Roulette-select the ray's path
        float roulette = rand();
        if (roulette < specChance)
        {
            // Specular reflection
            float alpha = SmoothnessToPhongAlpha(hit.smoothness);
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(reflect(ray.direction, hit.normal), alpha);
            float f = (alpha + 2) / (alpha + 1);
            ray.energy *= (1.0f / specChance) * hit.specular * sdot(hit.normal, ray.direction, f);
        }
        else if (diffChance > 0 && roulette < specChance + diffChance)
        {
            // Diffuse reflection
            ray.origin = hit.position + hit.normal * 0.001f;
            ray.direction = SampleHemisphere(hit.normal, 1.0f);
            ray.energy *= (1.0f / diffChance) * hit.albedo;
        }
        else
        {
            // Terminate ray
            ray.energy = 0.0f;
        }
        return hit.emission;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;
        
        // Sample the skybox and write it
        float theta = acos(ray.direction.y) / - PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / - PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    }
}

float3 SceneColor(Ray ray, inout float screenDepth)
{
    float3 sceneColor = float3(0, 0, 0);
    for (uint i = 0; i < _bounces; i ++)
    {
        RayHit hit = Trace(ray);
        if (hit.hited)
        {
            if(i == 0)
            {
                screenDepth = hit.distance;
            }
        }
        sceneColor += Shade(ray, hit) * ray.energy;
        if(!any(ray.energy))break;
    }
    return sceneColor;
}

float3 FogColor(Ray ray, float screenDepth)
{
    float3 fogColor = float3(0, 0, 0);
    uint cycle = 1;
    uint marchAdd = 0;
    for (uint i = 0; i < cycle; i ++)
    {
        float3 currentPos = ray.origin +
        ray.direction * (screenDepth * rand());
        
        Ray r = CreateRay(currentPos, SampleGlobalsphere());
        RayHit hit = Trace(r);
        if(hit.hited)
        {
            fogColor += hit.emission * r.energy;
            marchAdd += 1;
        }
    }
    if(marchAdd > 1)fogColor /= marchAdd;
    return fogColor ;
}

float2 RandDisk()
{
    return float2(rand(), rand());
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id: SV_DispatchThreadID)
{
    _Pixel = id.xy;
    // Get the dimensions of the RenderTexture
    uint width = _ScreenSize.x;
    uint height = _ScreenSize.y;
    
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    
    float3 final = float3(0, 0, 0);
    for (uint spp = 0; spp < _SamplePerPixel; spp ++)
    {
        Ray ray = CreateCameraRay(uv);
        float fouceDis = 4.5;
        float3 foucePos = ray.origin + ray.direction * fouceDis;
        ray.origin += cross(SampleGlobalsphere(), ray.direction) * 0.0f;
        ray.direction = normalize(foucePos - ray.origin);
        Ray sceneRay = ray;
        Ray fogRay = ray;
        float screenDepth = 0;
        float3 sceneColor = SceneColor(sceneRay, screenDepth);
        float3 fogColor = FogColor(fogRay, screenDepth);
        final += sceneColor;
        final += fogColor ;
        //final /= 2;
    }
    
    //Apply gamma correction
    //final = pow(final, 1 / 2.2);
    //final = pow(final, 2.2);
    
    Result[id.xy] += float4(final, 1);
    ResultOut[id.xy] = Result[id.xy] / _sampleCount;
    ResultOut[id.xy] = pow(ResultOut[id.xy], 1 / 2.2);
}

